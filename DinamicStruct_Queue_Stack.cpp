#include <iostream>
#include <string>
#include <Windows.h>
using namespace std;
//***************************| 2 Variant |*************************
void BaseLevel()
{

/*1.Создать очередь из вещественных чисел. Определить количество положительных значений элементов очереди. 
Организовать просмотр данных очереди.*/
	cout << "\nBase level task\n";
}

void MidleLevel()
{
	/*
	Создать очередь вещественных значений, для реализации используя односвязные списки. 
	Реализовать операции добавления (enqueue) и удаления (dequeue) элемента из очереди. Добавьте в очередь
	числа: -2.2, 2.3, 2.2, 5.1, 6.7 и распечатайте содержимое очереди. Удалите 3 элемента из очереди, затем
	добавьте в очередь число 1.9 и распечатайте очередь еще раз.  Найдите произведение элементов, 
	принадлежащих очереди. 
	*/

}

void HardLevel()
{
	/*
Арифметическое выражение можно представить в обратной польской записи, где знаки операции следуют за 
операндами (а не ставятся между ними, как в обычной записи выражений). Обратная польская запись не требует 
скобок. Например, выражению «1 + 2» соответствует запись «1 2 +», выражению «1 + 2 * 3» запись «1 2 3 * +» 
(вначале умножаются 2 на 3, а потом 1 складывается с результатом), «(2 + 3) * (3 – 1)» записывается как
«2 3 + 3 1 – *». Задается строка – выражение в обратной польской записи (числа и знаки +, –, * разделены 
пробелами). Используя стек, вычислите значение выражения. Подсказка: нужно последовательно перебрать все
числа и знаки из строки, числа нужно заносить в стек, а как встретится знак операции, вынимать 2 числа из 
стека, применять к ним текущую операцию, а результат заносить в стек.
	*/
}
void main()
{
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);
	setlocale(0, "");
	//BaseLevel();
	//MidleLevel();
	//HardLevel();

}

